plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

configurations {
    shade
    compile.extendsFrom shade
}

version = "${version}"
group = "${mod_group}"
archivesBaseName = "${mod_archive_name}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "--mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            jvmArgs("-Xmx4G")

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                spellchecker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "--mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            jvmArgs("-Xmx4G")

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                spellchecker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "--mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            jvmArgs("-Xmx4G")

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            args '--mod', 'spellchecker', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                spellchecker {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

repositories {
    maven {
        url = "https://cogcomp.seas.upenn.edu/m2repo/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    minecraftLibrary('com.swabunga:jazzy:1.0.0')
    shadow('com.swabunga:jazzy:1.0.0')
}

reobf {
    shadowJar {}
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "${project.group}.shade"
}

shadowJar {
    project.configurations.shadow.setTransitive(true)
    configurations = [project.configurations.shadow]
    dependsOn(relocateShadowJar)

    exclude 'CONTRIBUTORS.txt'
    exclude 'README.txt'
    exclude 'JSpellChecker.class'
    exclude 'JSpellChecker$1.class'
    exclude 'JSpellChecker$JSpellCheckListener.class'

    classifier = ''
}

jar.finalizedBy('reobfJar')

tasks.build.dependsOn(shadowJar)
tasks.shadowJar.dependsOn('reobfJar')

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "Mrbysco",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Mrbysco",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}